plugins {
    id 'java'
    id 'base'
    id 'com.github.johnrengelman.shadow' version '2.0.4'
    id 'checkstyle'
    id 'pmd'
    id "jacoco"
    id "com.github.spotbugs" version "1.6.3"
}

repositories {
    mavenCentral()
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
    gradleVersion = "4.10.1"
}

jar.enabled = false

dependencies {
    compile project(":api")
    compile project(":common")
    compile project(":cypress")
}

task fatJar {
    println "Creating fat jars"
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'checkstyle'

    checkstyle {
        configFile = rootProject.resources.text.fromFile('config/checkstyle/google_checks.xml').asFile()
        showViolations = true
        toolVersion '8.12'
    }

    tasks.withType(Checkstyle) {
        reports {
            xml.enabled false
            html.enabled true
            html.stylesheet resources.text.fromFile('../config/checkstyle/checkstyle-simple.xsl')
        }
    }
}

subprojects {
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'checkstyle'
    apply plugin: 'pmd'
    apply plugin: "jacoco"
    apply plugin: "com.github.spotbugs"

    repositories {
        mavenCentral()
    }

    dependencies {

        //useful libraries from google
        compile group: 'com.google.guava', name: 'guava', version: '26.0-jre'

        //libraries for more expressive testing
        testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'

        //JUnit should be the same version as spring
        testCompile group: 'junit', name: 'junit', version: '4.12'

        shadowJar { zip64 true }
    }

    task fatJar(dependsOn: shadowJar) {}


    jacocoTestReport {
        reports {
            xml.enabled false
            csv.enabled false
            html.destination file("${buildDir}/reports/jacoco")
        }
    }

    jacoco {
        toolVersion = "0.8.1"
    }

//    jacocoTestCoverageVerification.dependsOn jacocoTestReport
//    check.dependsOn jacocoTestCoverageVerification

	jacocoTestCoverageVerification {
	    violationRules {
			rule {
	            limit {
	                counter = 'METHOD'
	                value = 'COVEREDRATIO'
	                minimum = 0.1 //TODO: Increase this when we start writing tests
	            }
            }
        }
	}

    spotbugs {
        toolVersion = '3.1.3'
    }

	tasks.withType(com.github.spotbugs.SpotBugsTask) {
	    reports {
	        xml.enabled false
	        html.enabled true
	        html.stylesheet rootProject.resources.text.fromFile('config/spotbugs/spotbugs.xsl')
	    }
	}


    pmd {
        toolVersion = "6.7.0"
        ruleSetConfig = rootProject.resources.text.fromFile('config/pmd/potential-future-pmd.xml')

        ignoreFailures = true
    }



}
