plugins {
    id 'java'
    id 'base'
    id 'com.github.johnrengelman.shadow' version '2.0.4'
    id 'checkstyle'
    id 'pmd'
    id "jacoco"
}

repositories {
    mavenCentral()
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
    gradleVersion = "5.1.1"
}

jar.enabled = false

dependencies {
    implementation project(":api")
    implementation project(":cypress")
    implementation project(":validation")
    
}

task fatJar {
    println "Creating fat jars"
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'checkstyle'
    apply plugin: 'pmd'

    checkstyle {
        configFile = rootProject.resources.text.fromFile('config/checkstyle/checkstyle.xml').asFile()
        showViolations = true
        toolVersion '8.13'
    }

    tasks.withType(Checkstyle) {
        reports {
            xml.enabled false
            html.enabled true
            html.stylesheet rootProject.resources.text.fromFile('config/checkstyle/checkstyle-simple.xsl')
        }
    }


    pmd {
        toolVersion = "6.7.0"
        ruleSetConfig = rootProject.resources.text.fromFile('config/pmd/ruleset.xml')
        ruleSets = []
        ignoreFailures = false
    }

    test{
        failFast = true
    }
    
    
}

subprojects {
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'checkstyle'
    apply plugin: "jacoco"

    repositories {
        mavenCentral()
    }


    dependencies {

	    implementation ("io.symphonia:lambda-logging:1.0.3")

        //useful libraries from google
        implementation ("com.google.guava:guava:26.0-jre")

        //libraries for more expressive testing
        testImplementation ("org.hamcrest:hamcrest-all:1.3")

        //JUnit should be the same version as spring
        testImplementation ("junit:junit:4.12")

        shadowJar { zip64 true }
    }

    task fatJar(dependsOn: shadowJar) {}


    jacocoTestReport {
        reports {
            xml.enabled false
            csv.enabled false
            html.destination file("${buildDir}/reports/jacoco")
        }
    }

    jacoco {
        toolVersion = "0.8.1"
    }

//    jacocoTestCoverageVerification.dependsOn jacocoTestReport
//    check.dependsOn jacocoTestCoverageVerification

	jacocoTestCoverageVerification {
	    violationRules {
			rule {
	            limit {
	                counter = 'METHOD'
	                value = 'COVEREDRATIO'
	                minimum = 0.1 //TODO: Increase this when we start writing tests
	            }
            }
        }
	}
}
