AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: DynamoDB REST frontend

Parameters:
  ProjectId:
    Type: String
    Description: AWS CodeStar projectID used to associate new resources to team members
  Stage:
    Type: String
    Description: Deployment stage. E.g. test, prod, etc.
  LambdaTrustRoleArn:
    Type: String
  CodeBucket:
    Type: String
    Description: S3 Bucket containing artifacts and source code.
  Branch:
    Type: String
    Description: Repository branch name.
Resources:

  RestApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      # Waiting for open issue to be resolved: https://github.com/awslabs/serverless-application-model/issues/627
      #      Cors: "'amazonaws.com'"
      DefinitionBody:
        Fn::Transform:
          Name: 'AWS::Include'
          Parameters:
            Location: !Join ['', ['s3://', !Ref 'CodeBucket', '/openapi.yaml']]
  LambdaFunction:
    DependsOn:

    Type: AWS::Serverless::Function
    Properties:
      Handler: no.bibsys.handlers.StreamLambdaHandler::handleRequest
      Runtime: java8
      CodeUri: api/build/libs/api-fat.jar
      MemorySize: 1512
      Role: !Ref LambdaTrustRoleArn
      Timeout: 600
      Events:
        ApiResource:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: any
            RestApiId: !Ref RestApi
  RestApiUrlParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Join ['-', [!Ref 'ProjectId', !Ref Branch, !Ref Stage, "apiUrl"]]
      Type: "String"
      Value: !Join ['', ['https://', !Ref 'RestApi', '.execute-api.', !Ref 'AWS::Region', '.amazonaws.com/', !Ref 'Stage']]
      Description: "SSM Parameter for storing RestApi URL"

  RestApiUpAlarm:
    DependsOn:
      - HealthCheck
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Join ['-', [!Ref 'ProjectId', !Ref Branch, !Ref Stage, "RestApiUpAlarm"]]
      ComparisonOperator: LessThanThreshold
      EvaluationPeriods: 3
      MetricName: HealthCheckStatus
      Namespace: AWS/Route53
      Dimensions:
        - Name: HealthCheckId
          Value: !Ref HealthCheck
      Period: 60
      Statistic: Minimum
      Threshold: 1
      
  HealthCheck:
    DependsOn: 
      - RestApi
    Type: "AWS::Route53::HealthCheck"
    Properties: 
      HealthCheckConfig:
        FullyQualifiedDomainName: !Join ['', [!Ref 'RestApi', '.execute-api.', !Ref 'AWS::Region', '.amazonaws.com']]
        Type: HTTPS
        ResourcePath: !Join ['', ['/', !Ref 'Stage', '/ping']]

  # CustomResource backed by Lambda in Python for setting up SwaggerUI in S3
  SwaggerUIBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join ['-', [!Ref 'ProjectId', !Ref Branch, !Ref 'Stage', "swagger-ui"]]
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: 'index.html'
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
          - '*'
          AllowedMethods:
          - GET
          - PUT
          - HEAD
          - POST
          - DELETE
          AllowedOrigins:
          - '*'
  SetUpSwaggerUI:
    DependsOn:
    - SwaggerUIBucket
    - RestApi
    Type: AWS::Lambda::Function
    Properties:
      Environment:
        Variables:
          BUCKET_NAME: !Ref SwaggerUIBucket
          WEBSITE_URL: !GetAtt SwaggerUIBucket.WebsiteURL
          REST_API_ID: !Ref RestApi
          STAGE_NAME: !Ref Stage
      Code:
        ZipFile: |
          from botocore.vendored import requests
          import boto3
          import tarfile
          import os
          import json
          import mimetypes

          s3 = boto3.resource('s3')
          s3_client = boto3.client('s3')
          api_gateway_client = boto3.client('apigateway')

          def sendResponse(event, context, responseStatus):
            responseBody = {'Status': responseStatus,
                            'PhysicalResourceId': context.log_stream_name,
                            'StackId': event['StackId'],
                            'RequestId': event['RequestId'],
                            'LogicalResourceId': event['LogicalResourceId']}
            try:
                req = requests.put(event['ResponseURL'], data=json.dumps(responseBody))
                if req.status_code != 200:
                    print(req.text)
                    raise Exception('Recieved non 200 response while sending response to CFN.')
                return
            except requests.exceptions.RequestException as e:
                print(e)
                raise

          def download_spec(bucket_name):
            response = api_gateway_client.get_export(restApiId=os.environ.get('REST_API_ID'),
                              stageName=os.environ.get('STAGE_NAME'),
                              exportType='oas30',
                              parameters={'extensions':'apigateway'},
                              accepts='application/json')
            data = response['body'].read()
            s3_client.put_object(Bucket=bucket_name, Key='oas30.json', Body=data, ContentType=response['contentType'], ACL='public-read')


          def empty_bucket(bucket_name):
            bucket = s3.Bucket(bucket_name)
            print("Emptying bucket: {0}".format(bucket_name))
            bucket.objects.all().delete()

          def delete_bucket(bucket_name):
            bucket = s3.Bucket(bucket_name)
            print("Deleting bucket: {0}".format(bucket_name))                      
            bucket.delete()

          def replace_spec_in_index(path):
            with open(path + '/index.html', 'r+') as index_file:
              data = index_file.read().replace('https://petstore.swagger.io/v2/swagger.json', 
                                                os.environ.get('WEBSITE_URL') + '/oas30.json')
              index_file.write(data)

          def handler(event, context):
            try:   
              bucket_name = os.environ.get('BUCKET_NAME')          
              empty_bucket(bucket_name)

              if event['RequestType'] == 'Delete':
                delete_bucket(bucket_name)
                sendResponse(event, context, 'SUCCESS')
                return

              version = '3.19.3'
              url = 'https://github.com/swagger-api/swagger-ui/archive/v' + version + '.tar.gz'
              file = '/tmp/swagger-ui.tar.gz'

              print("Downloading {0} to {1}".format(url, file))
              r = requests.get(url)
              with open(file, "wb") as code:
                code.write(r.content)

              print("Extracting file: {0}".format(file))
              tar = tarfile.open(file)
              tar.extractall(path='/tmp/')
              tar.close

              download_spec(bucket_name)

              path = '/tmp/swagger-ui-' + version + '/dist'

              replace_spec_in_index(path)

              for subdir, dirs, files in os.walk(path):
                for file in files:
                  full_path = os.path.join(subdir, file)
                  content_type = mimetypes.guess_type(file)[0]
                  with open(full_path, 'rb') as data:
                    if content_type is None:
                      content_type = 'application/octet-stream'
                    print("Copying file to S3 bucket {0}: {1}".format(bucket_name, full_path))
                    s3_client.put_object(Bucket=bucket_name, Key=full_path[len(path)+1:], Body=data, ContentType=content_type, ACL='public-read')

              sendResponse(event, context, 'SUCCESS')
            except Exception as ex:
              print(ex)
              sendResponse(event, context, 'FAILED')
      Handler: index.handler
      Role: !Ref LambdaTrustRoleArn
      Runtime: python3.6
      Timeout: 60

  SwaggerUI:
    Type: Custom::SetUpSwaggerUI
    Properties:
      ServiceToken: !GetAtt SetUpSwaggerUI.Arn
      