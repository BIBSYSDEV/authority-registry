AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Example SpringBoot application that writes in a DynamoTable

Parameters:
  ProjectId:
    Type: String
    Description: AWS CodeStar projectID used to associate new resources to team members
  Stage:
    Type: String
    Description: Deployment stage. E.g. test, prod, etc.
  CodeBucket:
    Type: String
    Description: S3 Bucket containing artifacts and source code.
    
    # Enable blue/green deployments using this Globals section. For instructions, see the AWS CodeStar User Guide:
    # https://docs.aws.amazon.com/codestar/latest/userguide/how-to-modify-serverless-project.html?icmpid=docs_acs_rm_tr
    #
    # Globals:
    #   Function:
    #     AutoPublishAlias: live
    #     DeploymentPreference:
    #       Enabled: true
    #       Type: Canary10Percent5Minutes



    #Globals:
    #  Api:
    # API Gateway regional endpoints
#    EndpointConfiguration: REGIONAL

Resources:
  RestApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
#      Cors: 
#        AllowOrigin: "'*'"
      DefinitionBody:
        Fn::Transform:
          Name: 'AWS::Include'
          Parameters:
            Location: !Join ['', ['s3://', !Ref 'CodeBucket', '/openapi.yaml']]
  LambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: no.bibsys.handlers.StreamLambdaHandler::handleRequest
      Runtime: java8
      CodeUri: api/build/libs/api-fat.jar
      MemorySize: 1512
      #     Policies are inactive if there is a role attached to the lambda function
      #Policies:
      # - AWSLambdaBasicExecutionRole
      # - CustomDynamoDB_Full_Access
      Role:
        Fn::ImportValue:
          !Join ['-', [!Ref 'ProjectId', !Ref 'AWS::Region', 'LambdaTrustRole']]
      Timeout: 60
      Events:
        ApiResource:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: any
            RestApiId: !Ref RestApi
  RestApiUrlParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Join ['-', [!Ref 'ProjectId', !Ref 'Stage', "apiUrl"]]
      Type: "String"
      Value: !Join ['', ['https://', !Ref 'RestApi', '.execute-api.', !Ref 'AWS::Region', '.amazonaws.com/', !Ref 'Stage']]
      Description: "SSM Parameter for storing RestApi URL"

  SwaggerUIBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
  SetUpSwaggerUI:
    Type: AWS::Lambda::Function
    Properties:
      Environment:
        Variables:
          BUCKET_NAME: !Ref SwaggerUIBucket
      Code:
        ZipFile: |
          from botocore.vendored import requests
          import boto3
          import tarfile
          import os
          import json
          
          def sendResponse(event, context):
              responseBody = {'Status': "SUCCESS",
                              'PhysicalResourceId': context.log_stream_name,
                              'StackId': event['StackId'],
                              'RequestId': event['RequestId'],
                              'LogicalResourceId': event['LogicalResourceId']}
              try:
                  req = requests.put(event['ResponseURL'], data=json.dumps(responseBody))
                  if req.status_code != 200:
                      print(req.text)
                      raise Exception('Recieved non 200 response while sending response to CFN.')
                  return
              except requests.exceptions.RequestException as e:
                  print(e)
                  raise
          
          def handler(event, context):
              version = '3.19.3'
              url = 'https://github.com/swagger-api/swagger-ui/archive/v' + version + '.tar.gz'
              file = '/tmp/swagger-ui.tar.gz'
              bucket_name = os.environ.get('BUCKET_NAME')
              
              r = requests.get(url)
              with open(file, "wb") as code:
                code.write(r.content)
              
              tar = tarfile.open(file)
              tar.extractall(path='/tmp/')
              tar.close
              
              s3 = boto3.resource('s3')
              path = '/tmp/swagger-ui-' + version
              for subdir, dirs, files in os.walk(path):
                  for file in files:
                      full_path = os.path.join(subdir, file)
                      with open(full_path, 'rb') as data:
                          s3.Bucket(bucket_name).put_object(Key=full_path[len(path)+1:], Body=data)
              
              sendResponse(event, context)
      Handler: index.handler
      Role:
        Fn::ImportValue:
          !Join ['-', [!Ref 'ProjectId', !Ref 'AWS::Region', 'LambdaTrustRole']]
      Runtime: python3.6
      Timeout: 60
    DependsOn: SwaggerUIBucket  
  SwaggerUI:
    Type: Custom::SetUpSwaggerUI
    Properties:
      ServiceToken: !GetAtt SetUpSwaggerUI.Arn